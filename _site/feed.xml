<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>~/web/logs</title>
    <description>Personal website, blogs and other updates</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 14 Mar 2020 04:42:34 +0000</pubDate>
    <lastBuildDate>Sat, 14 Mar 2020 04:42:34 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Diffusion Map for manifold learning, Theory and Implementation</title>
        <description>&lt;hr /&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;‘Curse of dimensionality’ is a well-known problem in Data Science, which often causes poor performance, inaccurate results, and, most importantly, a similarity measure break-down. The primary cause of this is because high dimensional datasets are typically sparse, and often a lower-dimensional structure or ‘Manifold’ would embed this data. So there is a non-linear relationship among the variables (or features or dimensions), which we need to learn to compute better similarity.&lt;/p&gt;

&lt;p&gt;Manifold learning is an approach to non-linear dimensionality reduction. The basis for algorithms in manifold learning is that the dimensionality of many data sets is only artificially high &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. In this blog, we learn one of the many techniques in manifold learning called Diffusion Maps. The key idea is that Euclidean Distance, which is the most common measure of similarity, is meaningful only ‘locally.’ Therefore, assuming there is a lower-dimensional structure or manifold to the data, it would be appropriate to measure similarity over this structure rather than in the Euclidean space itself.&lt;/p&gt;

&lt;p&gt;Let us begin exploring with the following example of 2D datapoints neatly arranged in &lt;strong&gt;S&lt;/strong&gt; shape.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/Diffusion_Map/original_figA.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a definite shape to this dataset. Now, if we have to measure the similarity of two points in this set, we measure the Euclidean Distance. If this distance is small, then we say points are similar or if this is large, otherwise. The following figure represents this scenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/Diffusion_Map/original_figB.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, knowing the geometric structure, we know that this similarity measure is inaccurate. Since there is a non-linear relationship between ‘x’ and ‘y’ coordinates, it would be correct if we measure the similarity (or distance) over the very geometric structure itself, as shown in the Figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/Diffusion_Map/original_figC.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With Diffusion Map, we can do a non-linear dimensionality reduction as well as learn the underlying geometry of the high dimensional data. Let’s get straight to the theory and implementation, hand in hand&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;what-is-the-takeaway&quot;&gt;What is the takeaway?&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;This blog aims to introduce one of the manifold learning techniques called &lt;strong&gt;Diffusion Map&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. This technique enables us to understand the underlying geometric structure of high dimensional dataset as well as to reduce the dimensions, if required, by neatly capturing the non-linear relationships between the original dimensions.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;theory-behind-verybriefly&quot;&gt;Theory behind (very briefly)&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;The core idea is a time-dependent diffusion process, which is nothing but a random walk on the dataset where each hop has a probability associated with it. When the diffusion process runs for a time t, we get different probabilities of various paths it can take to calculate the distance over the underlying geometric structure. Mathematically, we call this the steady-state probability of the Markov Chain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/Diffusion_Map/randomwalk.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The connectivity between two data points, x, and y, is defined as the probability of jumping from x to y in one step of the random walk and is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;connectivity(x, y) = p(x,y)&lt;/script&gt;

&lt;p&gt;However, it is useful to express the connectivity as a row-normalized likelihood function, K using Gaussian Kernel. This will be called &lt;strong&gt;diffusion kernel&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;k(x,y) = \exp \left ( 
-\frac{\vert x-y \vert ^2}{\alpha}
\right )&lt;/script&gt;

&lt;p&gt;Now we define a row-normalized diffusion matrix, P.  Mathematically, this is equivalent to the transition matrix in the Markov chain. While P denotes the probability (or connectivity in this case) of single hopping from point x to point y, P² denotes the probability of reaching y from x in two hops and so on. As we increase the number of hops or Pᵗ for increasing values of t we observe that the diffusion process runs forward. Or in other words, the probability of following the geometric structure increases.&lt;/p&gt;

&lt;p&gt;If you would like to dig deeper into the theory behind, the &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Finside.mines.edu%2F~whereman%2Ftalks%2FdelaPorte-Herbst-Hereman-vanderWalt-DiffusionMaps-PRASA2008.pdf&quot;&gt;paper&lt;/a&gt; has explained it pretty neatly. For a quick overview, &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDiffusion_map&quot;&gt;this&lt;/a&gt; Wikipedia article also explains the theory well.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;To demonstrate the algorithm, we begin with a dataset having a definite geometric structure. Let us begin by creating a 2D figure, as shown earlier. Our main aim is to find out whether the diffusion map unravels the underlying geometric structure of data or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/Diffusion_Map/original_figA.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, let us add a synthetic 3rd dimension (data drawn from a uniform distribution) to this 2D dataset. Thus our new 3D dataset is as follows&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/Diffusion_Map/3Dset.gif&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, the 3D dataset preserves the ‘S’ shape in one angle, and that is correct. Now our goal is to flatten the dimensions to 2 while preserving this shape. After applying the Diffusion Map, hopefully, we should see the ‘S’ like structure in 2D.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;output&quot;&gt;Output&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/Diffusion_Map/01to09.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;As it is evident from the above output figures, with a diffusion map applied to reduce dimension from 3 to 2, we get to understand somewhat the original geometric structure, which is the ‘S’ shape. With varying values for alpha, we get slightly different variations in the final structure. (alpha is the parameter in diffusion kernel described above).&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Source code is available &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fgist.github.com%2Frahulrajpl%2F36a5724d0c261b915292182b1d741393&quot;&gt;here&lt;/a&gt; and is open-sourced under MIT License. You can try out the code in Google Colaboratory with the link provided on top of the gist.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;
&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Manifold Learning methods in Scikit-Learn (https://scikit-learn.org/stable/modules/manifold.html) &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Porte, Herbst, Hereman, Walt, &lt;em&gt;An introduction to Diffusion Maps&lt;/em&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/python/ml/2020/03/14/Diffusion-Map.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/ml/2020/03/14/Diffusion-Map.html</guid>
        
        
        <category>python</category>
        
        <category>ML</category>
        
      </item>
    
      <item>
        <title>Setting up Cuckoo Sandbox and Kioptrix for security hands-on</title>
        <description>&lt;hr /&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;In this blog, we will see how to set up the cuckoo sandbox and virtual box for malware analysis and installing ‘kioptrix’ boot-to-root VMs for penetration testing exercise. It is assumed that the host machine is installed with Ubuntu 18.04 or above with VirtualBox software.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;configuring-cuckoo-sandbox&quot;&gt;Configuring Cuckoo Sandbox&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Step 1: Download Cuckoo_setup.zip from Google Drive(&lt;em&gt;Link will be provided on request&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Step 2: “Run cuckoo_framework_install.sh” after unzipping the downloaded file from step 1. Cuckoo will work with python2 at the time of writing this, however, active development for porting the tool to python3 is in progress this year.&lt;/p&gt;

&lt;p&gt;Step 3: Step 2 will install a preconfigured Windows operating system to the VirtualBox. A new configuration file will be generated during the installation. Few configuration changes to be done will be after the following step.&lt;/p&gt;

&lt;p&gt;Step 4: Open up cuckoo2 in the VM. Check the IP address of the machine by running command ‘ipconfig’ in the cmd prompt. You will see and IP like &lt;strong&gt;192.168.56.10X&lt;/strong&gt;. Now go to the Machine tab, click on ‘Take Snapshot’ to save a snapshot of the machine.&lt;/p&gt;

&lt;p&gt;Step 5: Final configuration changes to be done for cuckoo sandbox is as follows-&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the path ‘/home/username/.cuckoo’ and find the ‘conf’ folder.&lt;/li&gt;
  &lt;li&gt;You only need to change three configuration files
namely ‘cuckoo.conf’, ’virtualbox.conf’, and ‘routing.conf’.&lt;/li&gt;
  &lt;li&gt;cuckoo.conf: The fields to be changed in this configuration file are machinery name, resultserver IP, and analysis timeout. The machinery
name is to be VirtualBox, resultserver ip addresss is to be the ip address
of the virtual network interface (vboxnet0), and the analysis timeout is
to be set as 20 seconds instead of 120 seconds.&lt;/li&gt;
  &lt;li&gt;virtualbox.conf: You are using virtualbox as a virtual machine, so you
need to update the configuration details of virtualbox.conf file. This file
contains the information about the network interface. In your case, it is
vboxnet0. The machine name is the same as the virtual machine name.
In your case, you imported the cuckoo2.ova file to virtualbox. Therefore,
your machine name will be cuckoo2. Label field is also same as the
machine name. Cross verify the host machine IP address under ‘platform’ and ‘Cuckoo2’ IP address you have checked while taking snapshot. Ensure the snapshot name is also correctly configured in this file.&lt;/li&gt;
  &lt;li&gt;routing.conf: This file contains the information about the routing. To
disable the Internet, set the Internet field as none in this configuration file.
If you want to create some fake Internet services, then set yes in the
inetsim field. If you are using inetsim, then you need to install the debian
package of inetsim into your host machine and change the
DNS_default_IP from the /etc/inetsim/inetsim.conf file. As a beginner,
we discourage you to do this for now. When we consider malware such
as bots, you might have to enable this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This completes the Cuckoo sandbox setup and is ready or malware analysis. Three main steps are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cuckoo clean&lt;/strong&gt; - this will clean the cuckoo generated reports earlier.(/home/user/.cuckoo/storage/analyses.)&lt;/li&gt;
  &lt;li&gt;**Cuckoo submit &lt;file&gt;** this will add task for &lt;file&gt; analysis&lt;/file&gt;&lt;/file&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cuckoo&lt;/strong&gt; - this will initialize the automated malware analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A specifically instrumented Windows 8 Operating System for Malware Analysis is available in the google drive. It includes programs such as Strings, upx packer, peid, resource hacker, DependencyWalker, PEView, Process Explorer, ProcMon, IDA Pro, and pstools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: The VM should be configured for ‘host-only’ network or, it may harm the host machine.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;configuring-kioptrix-for-pentesting-practice&quot;&gt;Configuring Kioptrix for Pentesting practice&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Step 1: Download Kioptrix level 1 from this &lt;a href=&quot;https://www.vulnhub.com/entry/kioptrix-level-1-1,22/&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 2: You will see a vmdk file when the download finishes. Since we are using virtualbox we need to setup vmdk on virtualbox.&lt;/p&gt;

&lt;p&gt;Step 3: Following steps are needed for the linking of vmdk with virtualbox&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open VirtualBox and create a new virtual machine, or open an existing one.&lt;/li&gt;
  &lt;li&gt;Click the “Settings” button.&lt;/li&gt;
  &lt;li&gt;Click “Storage.”&lt;/li&gt;
  &lt;li&gt;Click “SATA Controller.”&lt;/li&gt;
  &lt;li&gt;Click “Add Hard Disk.”&lt;/li&gt;
  &lt;li&gt;Navigate to and double-click on the VDMK file.&lt;/li&gt;
  &lt;li&gt;Click “OK” to save the setting.&lt;/li&gt;
  &lt;li&gt;Click the green “Start” icon to open the VMDK file and boot the virtual machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, if you boot the kioptrix from virtualbox, it will most likely end up in a ‘kernel panic’. Some more configurations are required before we get to handson with kioptrix boot-to-root VMs. Follows steps:&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new VM and choose not to use a disk&lt;/li&gt;
  &lt;li&gt;In “Settings -&amp;gt; Storage”, remove the SATA controller entirely and under the IDE controller add an new (existing) disk - and select the VMDK.&lt;/li&gt;
  &lt;li&gt;Under “Settings -&amp;gt; Audio” untick “Enable Audio”&lt;/li&gt;
  &lt;li&gt;Under “Settings -&amp;gt; Network” expand “Advanced” and change the Adaptor Type to “PCnet-PCI II (Am79c970A)”&lt;/li&gt;
  &lt;li&gt;Under “Settings -&amp;gt; Ports -&amp;gt; USB” untick “Enable USB Controller”&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Prof. Sandeep Shukla  and Mr. Nitesh Kumar (C3i center, IIT Kanpur) &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;https://smallbusiness.chron.com/open-vmdk-virtualbox-28847.html &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://www.hypn.za.net/blog/2017/07/15/running-kioptrix-level-1-and-others-in-virtualbox/ &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/security/2020/02/09/Setting-up-Cuckoo-Sandbox.html</link>
        <guid isPermaLink="true">http://localhost:4000/security/2020/02/09/Setting-up-Cuckoo-Sandbox.html</guid>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Diffusin Map for manifold learning, Theory and Implementation</title>
        <description>&lt;hr /&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;hr /&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;configuring-cuckoo-sandbox&quot;&gt;Configuring Cuckoo Sandbox&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Diffusion map for manifold learning&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
  &amp; \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  &amp; (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) &amp; \cdots &amp; \phi(e_1, e_n) \\
      \vdots &amp; \ddots &amp; \vdots \\
      \phi(e_n, e_1) &amp; \cdots &amp; \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*} %]]&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;configuring-kioptrix-for-pentesting-practice&quot;&gt;Configuring Kioptrix for Pentesting practice&lt;/h3&gt;
&lt;hr /&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;
&lt;hr /&gt;
</description>
        <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/python/2020/01/30/Setting-up-Cuckoo-Sandbox.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/2020/01/30/Setting-up-Cuckoo-Sandbox.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Maximising accuracy with limited training data using Transfer Learning </title>
        <description>&lt;hr /&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Transfer Learning is a technique in Deep Learning in which the model trained in one problem is reused partly in another problem. This technique can be a powerful tool to acquire the highest accuracy with very limited data, which otherwise would not be possible.&lt;/p&gt;

&lt;p&gt;Transfer learning is demonstrated using pytorch and pretrained model called vgg16 in &lt;a href=&quot;https://colab.research.google.com/drive/121mSI7rwrdEM9CMnmQn1zH260bUtJzqh&quot;&gt;this&lt;/a&gt; colab file.&lt;/p&gt;

&lt;p&gt;This lesson is part of tutorial, ‘Pytorch for Deep Learning and Computer Vision’ by Rayan Slim, Jad Slim, Amer Sharaf and Sarmad Tanveer. It is available in learning.oreilly.com&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;
&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Pretrained model approach to implement transfer learning&lt;/li&gt;
  &lt;li&gt;Various pretrained models in computer vision domain, viz. vgg16, vgg32, alexanet, etc.&lt;/li&gt;
  &lt;li&gt;Implementation and practical example to demonstrate&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;This lesson is part of tutorial, ‘Pytorch for Deep Learning and Computer Vision’ by Rayan Slim, Jad Slim, Amer Sharaf and Sarmad Tanveer. It is available in learning.oreilly.com&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/python/ml/2020/01/26/transfer-learning.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/ml/2020/01/26/transfer-learning.html</guid>
        
        
        <category>python</category>
        
        <category>ML</category>
        
      </item>
    
      <item>
        <title>Passive OSINT tools for beginners</title>
        <description>&lt;hr /&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Let’s see some of the most popular ways an entry-level OSINT wiz gets to do the passive reconnaissance of targeted computers and network. It’s passive’ as we do not directly engage with the target resources.&lt;/p&gt;

&lt;p&gt;A summary of techniques/tools, before jump into the details, are as follows: - &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Target Validation using Whois, nslookup, dnsrecon&lt;/li&gt;
  &lt;li&gt;Finding Subdomains using Google Fu, dig, nmap, sublis3r, bluto, crt.sh, etc.&lt;/li&gt;
  &lt;li&gt;Fingerprinting using nmap wappalyzer, whatweb, biltwith, netcat&lt;/li&gt;
  &lt;li&gt;Data Breaches using haveibeenpwned and similar lists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Hack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google hack is nothing but a clever google search, exploiting the search parameters to specifically target and get the results. Techniques are openly available on many websites and can be easily accessed. The website I follow personally is https://www.exploit-db.com/google-hacking-database. This compiles various working keywords you can search, for eg. “passwords.xlsx” ext:xlsx will fetch the password file from websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shodan - the hackers search enginer&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Go to the website shodan.io This requires you to register for an account to be able to search and use the filter. Eg search for ‘cisco and router’ and press search, it pull up IP add and devices. To filter country wise, there are filters available to refine the search for a target resource. A great tool for a passive OSINTer&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breach Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are millions of breached usernames and passwords in cleartext available all around the internet. Grab them at checking them is also another big way to find the potential target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hunter.io&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is another favorite place for hackers to gather intelligence. Explore the website to find out more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;theHarvester&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This tool is available in Kali Linux. Following is how this tool can be useful.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;theHarvester -d tesla.com -l 500 -b google
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;haveibeenpwned&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to this website haveibeenpwned.com, and see a particular email id is compromised or not. This is a great tool to check breached data as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS Recon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A tool call bruto can be used for DNS recon. This tool is open-sourced and is available in the GitHub repo &lt;a href=&quot;https://github.com/darryllane/Bluto&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skiptracer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is another OSINT scraping framework. This is available in the GitHub repo &lt;a href=&quot;https://github.com/xillwillx/skiptracer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;crt.sh&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to the website and search for a company website and it will pull out all the subdomain registered with the parent domain and with few other details&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technology behind a website&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tools like ‘wappalyzer’ and ‘&lt;a href=&quot;https://builtwith.com/&quot;&gt;builtwith&lt;/a&gt; can be used to find the technologies used in a particular website, specifically to check the version of the tools and see if that version has any exploitable vulnerabilities. Both these tools have browser extensions available, which makes the job easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whatweb&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is another command-line tool available in Kali Linux. The usage of the tool is as follows: -&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whatweb -v tesla.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Data pulled by this tool is similar to what wappalyzer and builtwith can do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Netizenship&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a tool I wrote to find out if a given username is already registered with popular websites or not. Project is open-sourced &lt;a href=&quot;https://github.com/rahulrajpl/netizenship&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Ethical Hacking course by @thecybermentor &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Penetration Testing and Ethical Hacking course by &lt;em&gt;Cybrary&lt;/em&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/security/2020/01/22/passive-reconnaissance.html</link>
        <guid isPermaLink="true">http://localhost:4000/security/2020/01/22/passive-reconnaissance.html</guid>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Packaging and shipping your python tools using Poetry</title>
        <description>&lt;p&gt;In this blog let’s see how we can package an application and distrubute it using tool called &lt;strong&gt;poetry&lt;/strong&gt;.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;step-1-download-and-install-poetry&quot;&gt;Step 1. Download and Install Poetry&lt;/h3&gt;
&lt;hr /&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.poetry/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Check the installation correctly by executing&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;poetry &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this throws and error regarding ‘threads’ like the one below&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rahul@rahul-lap:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;poetry &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
/home/rahul/.poetry/lib/poetry/_vendor/py2.7/subprocess32.py:149: RuntimeWarning: The _posixsubprocess module is not being used. Child process reliability may suffer &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;your program uses threads.
  &lt;span class=&quot;s2&quot;&gt;&quot;program uses threads.&quot;&lt;/span&gt;, RuntimeWarning&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Poetry version 1.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;, you might need to change the first line in configuration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.poetry/bin/poetry&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#!/usr/bin/env python&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#!/usr/bin/env python3&lt;/code&gt;. Save this file and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poetry --version&lt;/code&gt; again to check for errors if any.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;step-2-packaging&quot;&gt;Step 2. Packaging&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;If you have a simple script written in python, something similar following ‘demo-tool’&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;, you have to go the project directory, open up the terminal and execute, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poetry init&lt;/code&gt;. This command will guide you to create the most important file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyproject.toml&lt;/code&gt;, which will orchestrate the packaging for you. Once the interactive generation is finishied, this file will look like below&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tool.poetry]
name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;demo-tool&quot;&lt;/span&gt;
version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a demo tool for printing hello world&quot;&lt;/span&gt;
authors &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Your Name &amp;lt;you@example.com&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
license &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tool.poetry.dependencies]
python &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^3.7&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tool.poetry.dev-dependencies]

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;build-system]
requires &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;poetry&amp;gt;=0.12&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
build-backend &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;poetry.masonry.api&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can add an entry point to the file using ‘console_script’ in poetry way. Following lines to be appended to our demo program.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tool.poetry.scripts]
demo-tool &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'demo-tool:main'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In case your program has some dependecy, you can add it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poetry add &amp;lt;package-name&amp;gt;&lt;/code&gt;. For example, if your program depends on beautifulsoup webscrapping library, you have to add this dependency to the toml file by running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poetry add beautifulsoup4&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;step-3-distributing&quot;&gt;Step 3. Distributing&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Once all your packages are ready to be shipped, you can publish it in PyPI, which is repo of python packages used by the popular tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
Run the following command to publish your package&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;poetry build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then publish it(Here you have to enter your pyPI credentials)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peotry publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can do it with single command as below&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;poetry publish &lt;span class=&quot;nt&quot;&gt;--username&lt;/span&gt; &amp;lt;YOUR-USERNAME&amp;gt; &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt; &amp;lt;YOUR-PASSWORD&amp;gt; &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you do not have an account in PyPI, go to &lt;a href=&quot;https://pypi.org&quot;&gt;pypi.org&lt;/a&gt; and create and account.&lt;/p&gt;

&lt;p&gt;Now that your tool is available to outside world to use.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;step-4-installation-and-usage&quot;&gt;Step 4. Installation and Usage&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Now anyone can install this tool by running,&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;demo-tool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will create a system-wide availability of the command ‘demo-tool’ and can be run by simply executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo-tool&lt;/code&gt; anywhere from the system.&lt;/p&gt;

&lt;p&gt;If you want to locally install it, create a virtual environment using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv venv&lt;/code&gt; and activate it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source /venv/bin/activate&lt;/code&gt; and then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install demo-tool&lt;/code&gt;. This will be available locally only to this virtual environment.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://python-poetry.org/ &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;https://pypi.org/ &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://packaging.python.org/guides/distributing-packages-using-setuptools/#setup-args &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/python/bash/2020/01/19/PoetryPackaging.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/bash/2020/01/19/PoetryPackaging.html</guid>
        
        
        <category>python</category>
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Realtime 3D plot using matplotlib library</title>
        <description>&lt;p&gt;Following code is used to simulate the real-time sensor data.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csv&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fieldnames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x_value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;total_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;total_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;total_3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;csv_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DictWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldnames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;csv_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;csv_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DictWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldnames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldnames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'x_value'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'total_1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'total_2'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'total_3'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;csv_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writerow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;x_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Code to plot this simulated sensor data to a 3D plot is done with the following code snippet.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.animation&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FuncAnimation&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mpl_toolkits.mplot3d&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Axes3D&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'3d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fivethirtyeight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x_value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'total_1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'total_2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'total_3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Random 3D data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'upper left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tight_layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ani&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FuncAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tight_layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;output&quot;&gt;Output&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/static/projects/Peek2.gif&quot; alt=&quot;output&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;references&quot;&gt;References:&lt;/h4&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Build up over 2D plotting video tutorial by Mr. Corey Schafer. &lt;a href=&quot;https://www.youtube.com/watch?v=Ercd-Ip5PfQ&quot;&gt;watch&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/dataviz/python/2020/01/16/Realtime-3D-plot.html</link>
        <guid isPermaLink="true">http://localhost:4000/dataviz/python/2020/01/16/Realtime-3D-plot.html</guid>
        
        
        <category>DataViz</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Gentle Introduction to Malicious Software or Malware</title>
        <description>&lt;h4 id=&quot;definition&quot;&gt;Definition&lt;/h4&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Malicious logic, more commonly called malware, is a set of instructions that cause a site’s security policy to be violated.&lt;sup id=&quot;fnref:fn1&quot;&gt;&lt;a href=&quot;#fn:fn1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Malware is the swiss-army knife of cyber criminals and any other adversary to your corporation or organization&lt;sup id=&quot;fnref:fn2&quot;&gt;&lt;a href=&quot;#fn:fn2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. In earlier days, when UNIX systems were popular, the hackers found a new way to get access to victims machine with a little piece of malicious code like the one below&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh &lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# make a privileged, hidden copy of the shell (command interpreter) &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /bin/sh /tmp/.xxsh 
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;o+s, w+x /tmp/.xxsh

&lt;span class=&quot;c&quot;&gt;# do what the victim thinks is *all* you’re doing &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# delete this file &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; ./ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When this file is saved with the file name ‘ls’ is victim’s home directory, and if the root user in victim’s machine executes ‘ls’ command, above script will run and it creates a copy of the shell in /tmp/ directory with the root previleges. Above script also deletes the file and thus leaves no trail. Now the copy of shell can be used for all non-sensible things by the hacker.&lt;/p&gt;

&lt;p&gt;But, this trick won’t work anymore as the current directory ‘.’ is not in the system path variable by default in any latest LINUX systems. But nothing stops you from adding ‘.’ into the $PATH variable.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;types-of-malwares-and-its-definitions&quot;&gt;Types of malwares and its definitions&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;Further in this post, let’s see the various types of malware and its formal definitions&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;Trojan horse&lt;/strong&gt; is a program with an overt (documented or known) purpose and a covert (undocumented or unexpected) purpose. A Trojan horse is a program with an overt (documented or known) purpose and a covert (undocumented or unexpected) purpose. A &lt;em&gt;rootkit&lt;/em&gt; is a pernicious trojan hourse. It hides in the system and can avoid detection. A trojan hourse can be a &lt;em&gt;propagating&lt;/em&gt; one as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;computer virus&lt;/strong&gt; is a program that inserts (a possibly transformed version of) itself into one or more files and then performs some (possibly null) action.
    &lt;ul&gt;
      &lt;li&gt;A boot sector infector is a virus that inserts itself into the boot sector of a disk. Eg. Brain Virus of IBM Machine.&lt;/li&gt;
      &lt;li&gt;An executable infector is a virus that infects executable programs. Eg. Jerusalem Virus (Also called Israeli Virus).&lt;/li&gt;
      &lt;li&gt;A multipartite virus is one that can infect both boot sectors and applications.&lt;/li&gt;
      &lt;li&gt;A macro virus is a virus composed of a sequence of instructions that is interpreted, rather than executed directly. Eg. Melissa Virus of MSWord97/98 docs.&lt;/li&gt;
      &lt;li&gt;A terminate and stay resident (TSR) virus is one that stays active (resident) in memory after the application, bootstrapping, or macro interpretation has terminated.&lt;/li&gt;
      &lt;li&gt;Stealth viruses are viruses that conceal the infection of files.&lt;/li&gt;
      &lt;li&gt;An encrypted virus is a virus that encrypts all of the virus except the cryptographic key and a decryption key.&lt;/li&gt;
      &lt;li&gt;A metamorphic virus is a virus that changes its internal structure but performs the same actions each time it is executed. Eg. Zmist(W95)&lt;/li&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;computer worm&lt;/strong&gt; is a program that copies itself from one computer to another. Eg. Stuxnet worm, the Internet Worm, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;bot&lt;/strong&gt; is malware that carries out some action in coordination with other bots. The attacker, called a botmaster, controls the bots from one or more systems called command and control (C&amp;amp;C) servers or motherships. They communicate over paths called C&amp;amp;C channels. A collection of bots is a &lt;strong&gt;botnet&lt;/strong&gt;. Eg. Torpig, GTBot, etc.
    &lt;ul&gt;
      &lt;li&gt;Botnet developers discovered how to use this to increase the difficulty of
locating bots, especially those used as botmasters. The idea is to associate a list of IP addresses with a particular host name. The binding between the host name and the IP address changes rapidly, with the next IP address selected from that list. These botnets are called IP flux botnets&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;bacterium&lt;/strong&gt; or a &lt;strong&gt;rabbit&lt;/strong&gt; is a program that absorbs all of some class of resource.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;logic bomb&lt;/strong&gt; is a program that performs an action that violates the security policy when some external event occurs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Adware&lt;/strong&gt; is a Trojan horse that gathers information for marketing purposes and displays advertisements, often based on the gathered information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spyware&lt;/strong&gt; is a Trojan horse that records information about the use of a computer, usually resulting in confidential information such as keystrokes, passwords, credit card numbers, and visits to web sites. The information may be transmitted to a third party, stored for later transmission, or stored for retrieval by a third party. Eg. Pegasus&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ransomware&lt;/strong&gt; is malware that inhibits the use of resources until a ransom, usually monetary, is paid. Eg. Wannacry, CryptoLocker, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today’s malware is combination of various types of above mentioned ones and detecting whether a program is malware or not is &lt;strong&gt;undecidable&lt;/strong&gt; as per Rice’s Theorem.&lt;sup id=&quot;fnref:fn3&quot;&gt;&lt;a href=&quot;#fn:fn3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. And the sheer number of various malware made it impractical to design a rule based system to classify them as malware as best as possible. Solution to this mess is Machine Learning based detection methods. However, the best method also doesn’t guarantee that perfect classification. The aim is to reduce the false positives and false negetives in a machine learning based model for classification of malware.&lt;/p&gt;

&lt;p&gt;More work related to ML based malware analysis will be discussed in future blogs.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;references&quot;&gt;References:&lt;/h4&gt;
&lt;hr /&gt;
&lt;!--stackedit_data:
eyJoaXN0b3J5IjpbMzA0MDczNTU0XX0=
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn1&quot;&gt;
      &lt;p&gt;Computer Security - Arts and Science, &lt;em&gt;Matt Bishop&lt;/em&gt; (Ch23 of 2nd Edition) &lt;a href=&quot;#fnref:fn1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn2&quot;&gt;
      &lt;p&gt;https://cuckoosandbox.org &lt;a href=&quot;#fnref:fn2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn3&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Rice%27s_theorem &lt;a href=&quot;#fnref:fn3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/security/2020/01/15/malware-intro.html</link>
        <guid isPermaLink="true">http://localhost:4000/security/2020/01/15/malware-intro.html</guid>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Introduction to dynamic realtime plotting with Plotly/Dash</title>
        <description>&lt;p&gt;–DRAFT POST–&lt;/p&gt;

&lt;h3 id=&quot;oblutrack&quot;&gt;ObluTrack&lt;/h3&gt;

&lt;p&gt;Code for this project can be found &lt;a href=&quot;https://github.com/rahulrajpl/oblutrack&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;present-stage&quot;&gt;Present Stage:&lt;/h3&gt;
&lt;p&gt;Dynamic realtime plotting of randomly generated x,y data to a web based GUI using plotly/dash&lt;/p&gt;

&lt;h3 id=&quot;next-target&quot;&gt;Next Target:&lt;/h3&gt;
&lt;p&gt;Access the sensor data from OBLU Device and plot it dynamically to get the real time trail&lt;/p&gt;

&lt;h3 id=&quot;sneakpeak&quot;&gt;SneakPeak:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/fYBi803HsDsibgRJpc/giphy.gif&quot; alt=&quot;link&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This post is being updated…&lt;/p&gt;

&lt;h3 id=&quot;thanks&quot;&gt;Thanks:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1] https://community.plot.ly
[2] https://pythonprogramming.net/live-graphs-data-visualization-application-dash-python-tutorial/ (via @Sentdex )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/python/dataviz/2020/01/06/dash-intro.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/dataviz/2020/01/06/dash-intro.html</guid>
        
        
        <category>python</category>
        
        <category>DataViz</category>
        
      </item>
    
      <item>
        <title>Image Style Transfer using Convolutional Neural Network</title>
        <description>&lt;h3 id=&quot;original-paper&quot;&gt;&lt;em&gt;Original paper&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Gatys_Image_Style_Transfer_CVPR_2016_paper.pdf&quot;&gt;Image style transfer using Convolutional Neural Network&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;&lt;em&gt;Code&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Implementation using pytorch - &lt;a href=&quot;https://colab.research.google.com/drive/10lvm78PdFyjkFixoMYD6DgH-Hpgt3Ja7&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;learning&quot;&gt;&lt;em&gt;Learning&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Transfer Learning&lt;/li&gt;
  &lt;li&gt;Pretrained models (AlexNet, VGG16, VGG19)&lt;/li&gt;
  &lt;li&gt;video generation using cv2 library&lt;/li&gt;
  &lt;li&gt;Speeding up the training using CUDA/ GPU&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;credits&quot;&gt;&lt;em&gt;Credits&lt;/em&gt;:&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PyTorch for Deep Learning and Computer Vision

Rayan Slim, Jad Slim, Amer Sharaf, Sarmad Tanveer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/python/ml/2020/01/03/StyleTransfer.html</link>
        <guid isPermaLink="true">http://localhost:4000/python/ml/2020/01/03/StyleTransfer.html</guid>
        
        
        <category>python</category>
        
        <category>ML</category>
        
      </item>
    
  </channel>
</rss>
